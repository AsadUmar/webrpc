/* eslint-disable */
// api v0.0.1 57685b3b040716f493e594df2f803484b158f5d0
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/typescript
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.0.1"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "57685b3b040716f493e594df2f803484b158f5d0"


//
// Types
//
export interface Status {
  success: boolean
  error: string
  id: number
  message: string
}

export interface PartialStatus {
  success?: boolean
  error?: string
  id?: number
  message?: string
  keys: Array<string>
}

export interface Buyer {
  name: string
  email: string
}

export interface PartialBuyer {
  name?: string
  email?: string
  keys: Array<string>
}

export interface SectorData {
  buyer: Buyer
  arr: Array<string>
}

export interface PartialSectorData {
  buyer?: Buyer
  arr?: Array<string>
  keys: Array<string>
}

export interface Quote {
  id?: number
  title: string
  program_id: number
  floorplan_id?: number
  logo?: string
  description?: string
  data: {[key: string]: any}
  status: {[key: string]: any}
}

export interface PartialQuote {
  id?: number
  title?: string
  program_id?: number
  floorplan_id?: number
  logo?: string
  description?: string
  data?: {[key: string]: any}
  status?: {[key: string]: any}
  keys: Array<string>
}

export interface Sector {
  id?: number
  uuid: string
  company_id: number
  program_id: number
  user_id: number
  name: string
  floor_no: number
  data?: SectorData
  floorplan?: Floorplan
  owner_name?: string
  owner_email?: string
  owner_phone?: string
  original_bf_id: number
  status: {[key: string]: any}
}

export interface PartialSector {
  id?: number
  uuid?: string
  company_id?: number
  program_id?: number
  user_id?: number
  name?: string
  floor_no?: number
  data?: SectorData
  floorplan?: Floorplan
  owner_name?: string
  owner_email?: string
  owner_phone?: string
  original_bf_id?: number
  status?: {[key: string]: any}
  keys: Array<string>
}

export interface Floorplan {
  id?: number
  sector_id: number
  name: string
  image: string
  data: {[key: string]: any}
  status?: {[key: string]: any}
  version: number
  quote: {[key: string]: any}
}

export interface PartialFloorplan {
  id?: number
  sector_id?: number
  name?: string
  image?: string
  data?: {[key: string]: any}
  status?: {[key: string]: any}
  version?: number
  quote?: {[key: string]: any}
  keys: Array<string>
}

export interface BaseFloorplan {
  id: number
  sector_id: number
  data: {[key: string]: any}
  status?: {[key: string]: any}
}

export interface PartialBaseFloorplan {
  id?: number
  sector_id?: number
  data?: {[key: string]: any}
  status?: {[key: string]: any}
  keys: Array<string>
}

export interface SectorService {
  getBaseFloorplansBySector(args: GetBaseFloorplansBySectorArgs, headers?: object): Promise<GetBaseFloorplansBySectorReturn>
  updateFloorplan(args: UpdateFloorplanArgs, headers?: object): Promise<UpdateFloorplanReturn>
  createFloorplan(args: CreateFloorplanArgs, headers?: object): Promise<CreateFloorplanReturn>
  getFloorplanImageUploadURL(args: GetFloorplanImageUploadURLArgs, headers?: object): Promise<GetFloorplanImageUploadURLReturn>
  getByUUID(args: GetByUUIDArgs, headers?: object): Promise<GetByUUIDReturn>
  get(args: GetArgs, headers?: object): Promise<GetReturn>
  getCurrent(headers?: object): Promise<GetCurrentReturn>
}

export interface GetBaseFloorplansBySectorArgs {
  sector_id: number
}

export interface GetBaseFloorplansBySectorReturn {
  result: Array<BaseFloorplan>  
}
export interface UpdateFloorplanArgs {
  id: number
  floorplan: PartialFloorplan
}

export interface UpdateFloorplanReturn {
  status: Status  
}
export interface CreateFloorplanArgs {
  floorplan: Floorplan
  sectorStatus: string
}

export interface CreateFloorplanReturn {
  status: Status  
}
export interface GetFloorplanImageUploadURLArgs {
  id: number
}

export interface GetFloorplanImageUploadURLReturn {
  url: string  
}
export interface GetByUUIDArgs {
  uuid: string
}

export interface GetByUUIDReturn {
  result: Sector  
}
export interface GetArgs {
  id: number
}

export interface GetReturn {
  result: Sector  
}
export interface GetCurrentArgs {
}

export interface GetCurrentReturn {
  result: Array<Sector>  
}


  
//
// Client
//
export class SectorService implements SectorService {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/SectorService/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = fetch
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  
  getBaseFloorplansBySector = (args: GetBaseFloorplansBySectorArgs, headers?: object): Promise<GetBaseFloorplansBySectorReturn> => {
    return this.fetch(
      this.url('GetBaseFloorplansBySector'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          result: <Array<BaseFloorplan>>(_data.result)
        }
      })
    })
  }
  
  updateFloorplan = (args: UpdateFloorplanArgs, headers?: object): Promise<UpdateFloorplanReturn> => {
    return this.fetch(
      this.url('UpdateFloorplan'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <Status>(_data.status)
        }
      })
    })
  }
  
  createFloorplan = (args: CreateFloorplanArgs, headers?: object): Promise<CreateFloorplanReturn> => {
    return this.fetch(
      this.url('CreateFloorplan'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <Status>(_data.status)
        }
      })
    })
  }
  
  getFloorplanImageUploadURL = (args: GetFloorplanImageUploadURLArgs, headers?: object): Promise<GetFloorplanImageUploadURLReturn> => {
    return this.fetch(
      this.url('GetFloorplanImageUploadURL'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          url: <string>(_data.url)
        }
      })
    })
  }
  
  getByUUID = (args: GetByUUIDArgs, headers?: object): Promise<GetByUUIDReturn> => {
    return this.fetch(
      this.url('GetByUUID'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          result: <Sector>(_data.result)
        }
      })
    })
  }
  
  get = (args: GetArgs, headers?: object): Promise<GetReturn> => {
    return this.fetch(
      this.url('Get'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          result: <Sector>(_data.result)
        }
      })
    })
  }
  
  getCurrent = (headers?: object): Promise<GetCurrentReturn> => {
    return this.fetch(
      this.url('GetCurrent'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          result: <Array<Sector>>(_data.result)
        }
      })
    })
  }
  
}

  
export interface WebRPCError extends Error {
  code: string
  msg: string
	status: number
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status } as WebRPCError
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
